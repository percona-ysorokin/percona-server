#
# Component Masking Functions: mask_pan_relaxed()
#
INSTALL COMPONENT 'file://component_masking_functions';
# arity checks
SELECT mask_pan_relaxed();
ERROR HY000: Can't initialize function 'mask_pan_relaxed'; Wrong argument list: should be (string, [char])
SELECT mask_pan_relaxed('', '', '');
ERROR HY000: Can't initialize function 'mask_pan_relaxed'; Wrong argument list: should be (string, [char])
# argument nullness checks
SELECT mask_pan_relaxed('', NULL);
ERROR HY000: mask_pan_relaxed<string> UDF failed; argument 2 cannot be null
# constraints checks
SELECT mask_pan_relaxed('');
ERROR HY000: mask_pan_relaxed<string> UDF failed; Argument must be between 14 and 19 characters
SELECT mask_pan_relaxed('1234567890123');
ERROR HY000: mask_pan_relaxed<string> UDF failed; Argument must be between 14 and 19 characters
SELECT mask_pan_relaxed('12345678901234567890');
ERROR HY000: mask_pan_relaxed<string> UDF failed; Argument must be between 14 and 19 characters
SELECT mask_pan_relaxed('123456789', '');
ERROR HY000: mask_pan_relaxed<string> UDF failed; Argument must be between 14 and 19 characters
SELECT mask_pan_relaxed('123456789', 'XX');
ERROR HY000: mask_pan_relaxed<string> UDF failed; Argument must be between 14 and 19 characters
# NULL for NULL checks
include/assert.inc [mask_pan_relaxed() for the NULL primary argument should return NULL]
include/assert.inc [mask_pan_relaxed() for the NULL primary argument and custom mask should return NULL]
# logic checks
SET @check_expression_result = mask_pan_relaxed('1234567887654321');
include/assert.inc [the result of evaluating 'mask_pan_relaxed('1234567887654321')' must be equal to '123456XXXXXX4321']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed('1234567887654321')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed('1234567887654321')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed('12345678-8765-4321');
include/assert.inc [the result of evaluating 'mask_pan_relaxed('12345678-8765-4321')' must be equal to '123456XX-XXXX-4321']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed('12345678-8765-4321')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed('12345678-8765-4321')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed('12345678 8765 4321');
include/assert.inc [the result of evaluating 'mask_pan_relaxed('12345678 8765 4321')' must be equal to '123456XX XXXX 4321']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed('12345678 8765 4321')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed('12345678 8765 4321')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed('12345678-87654321');
include/assert.inc [the result of evaluating 'mask_pan_relaxed('12345678-87654321')' must be equal to '123456XX-XXXX4321']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed('12345678-87654321')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed('12345678-87654321')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed('1234567887654321', 'Ю');
include/assert.inc [the result of evaluating 'mask_pan_relaxed('1234567887654321', 'Ю')' must be equal to '123456ЮЮЮЮЮЮ4321']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed('1234567887654321', 'Ю')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed('1234567887654321', 'Ю')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed(_ascii '1234567887654321', 'Ю');
include/assert.inc [the result of evaluating 'mask_pan_relaxed(_ascii '1234567887654321', 'Ю')' must be equal to '123456??????4321']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(_ascii '1234567887654321', 'Ю')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(_ascii '1234567887654321', 'Ю')' must be 'ascii_general_ci']
# character set / collation checks
SET @regular_charset_list = '[ "utf8mb4", "utf8mb3", "utf16", "utf16le", "utf32", "ucs2", "koi8u"]';
SET @special_charset_list = '[ "latin2", "ascii", "binary"]';
SET @charset_list = JSON_MERGE_PRESERVE(@regular_charset_list, @special_charset_list);
# checking utf8mb4 string with utf8mb4 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with utf8mb3 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf8mb3))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf8mb3))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf8mb3))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf8mb3))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with utf16 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf16))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf16))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf16))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf16))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with utf16le mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf16le))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf16le))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf16le))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf16le))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with utf32 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf32))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING utf32))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf32))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING utf32))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with ucs2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING ucs2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING ucs2))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING ucs2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING ucs2))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with koi8u mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING koi8u))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('Ю' USING koi8u))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING koi8u))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('Ю' USING koi8u))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with latin2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('@' USING latin2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('@' USING latin2))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('@' USING latin2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('@' USING latin2))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with ascii mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('@' USING ascii))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('@' USING ascii))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('@' USING ascii))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('@' USING ascii))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with binary mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('@' USING binary))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb4), CONVERT('@' USING binary))' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('@' USING binary))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb4), CONVERT('@' USING binary))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb3 string with utf8mb4 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf8mb4));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf8mb4))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf8mb4))' must be 'utf8mb3_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf8mb4));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf8mb4))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf8mb4))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with utf8mb3 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf8mb3))' must be 'utf8mb3_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf8mb3))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with utf16 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf16));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf16))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf16))' must be 'utf8mb3_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf16));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf16))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf16))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with utf16le mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf16le));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf16le))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf16le))' must be 'utf8mb3_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf16le));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf16le))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf16le))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with utf32 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf32));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf32))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING utf32))' must be 'utf8mb3_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf32));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf32))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING utf32))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with ucs2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING ucs2))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING ucs2))' must be 'utf8mb3_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING ucs2))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING ucs2))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with koi8u mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING koi8u));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING koi8u))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('Ю' USING koi8u))' must be 'utf8mb3_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING koi8u));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING koi8u))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('Ю' USING koi8u))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with latin2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('@' USING latin2));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('@' USING latin2))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('@' USING latin2))' must be 'utf8mb3_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('@' USING latin2));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('@' USING latin2))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('@' USING latin2))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with ascii mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('@' USING ascii));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('@' USING ascii))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('@' USING ascii))' must be 'utf8mb3_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('@' USING ascii));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('@' USING ascii))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('@' USING ascii))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with binary mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('@' USING binary));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('@' USING binary))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf8mb3), CONVERT('@' USING binary))' must be 'utf8mb3_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('@' USING binary));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('@' USING binary))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf8mb3), CONVERT('@' USING binary))' must be 'utf8mb3_general_ci']
# checking utf16 string with utf8mb4 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf8mb4))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf8mb4))' must be 'utf16_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf8mb4))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf8mb4))' must be 'utf16_general_ci']
# checking utf16 string with utf8mb3 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf8mb3))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf8mb3))' must be 'utf16_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf8mb3))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf8mb3))' must be 'utf16_general_ci']
# checking utf16 string with utf16 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf16))' must be 'utf16_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf16))' must be 'utf16_general_ci']
# checking utf16 string with utf16le mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf16le))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf16le))' must be 'utf16_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf16le))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf16le))' must be 'utf16_general_ci']
# checking utf16 string with utf32 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf32))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING utf32))' must be 'utf16_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf32))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING utf32))' must be 'utf16_general_ci']
# checking utf16 string with ucs2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING ucs2))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING ucs2))' must be 'utf16_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING ucs2))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING ucs2))' must be 'utf16_general_ci']
# checking utf16 string with koi8u mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING koi8u))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('Ю' USING koi8u))' must be 'utf16_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING koi8u))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('Ю' USING koi8u))' must be 'utf16_general_ci']
# checking utf16 string with latin2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('@' USING latin2))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('@' USING latin2))' must be 'utf16_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('@' USING latin2))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('@' USING latin2))' must be 'utf16_general_ci']
# checking utf16 string with ascii mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('@' USING ascii))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('@' USING ascii))' must be 'utf16_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('@' USING ascii))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('@' USING ascii))' must be 'utf16_general_ci']
# checking utf16 string with binary mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('@' USING binary))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16), CONVERT('@' USING binary))' must be 'utf16_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('@' USING binary))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16), CONVERT('@' USING binary))' must be 'utf16_general_ci']
# checking utf16le string with utf8mb4 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf8mb4))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf8mb4))' must be 'utf16le_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf8mb4))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf8mb4))' must be 'utf16le_general_ci']
# checking utf16le string with utf8mb3 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf8mb3))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf8mb3))' must be 'utf16le_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf8mb3))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf8mb3))' must be 'utf16le_general_ci']
# checking utf16le string with utf16 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf16))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf16))' must be 'utf16le_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf16))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf16))' must be 'utf16le_general_ci']
# checking utf16le string with utf16le mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf16le))' must be 'utf16le_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf16le))' must be 'utf16le_general_ci']
# checking utf16le string with utf32 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf32))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING utf32))' must be 'utf16le_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf32))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING utf32))' must be 'utf16le_general_ci']
# checking utf16le string with ucs2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING ucs2))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING ucs2))' must be 'utf16le_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING ucs2))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING ucs2))' must be 'utf16le_general_ci']
# checking utf16le string with koi8u mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING koi8u))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('Ю' USING koi8u))' must be 'utf16le_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING koi8u))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('Ю' USING koi8u))' must be 'utf16le_general_ci']
# checking utf16le string with latin2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('@' USING latin2))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('@' USING latin2))' must be 'utf16le_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('@' USING latin2))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('@' USING latin2))' must be 'utf16le_general_ci']
# checking utf16le string with ascii mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('@' USING ascii))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('@' USING ascii))' must be 'utf16le_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('@' USING ascii))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('@' USING ascii))' must be 'utf16le_general_ci']
# checking utf16le string with binary mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('@' USING binary))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf16le), CONVERT('@' USING binary))' must be 'utf16le_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('@' USING binary))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf16le), CONVERT('@' USING binary))' must be 'utf16le_general_ci']
# checking utf32 string with utf8mb4 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf8mb4))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf8mb4))' must be 'utf32_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf8mb4))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf8mb4))' must be 'utf32_general_ci']
# checking utf32 string with utf8mb3 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf8mb3))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf8mb3))' must be 'utf32_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf8mb3))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf8mb3))' must be 'utf32_general_ci']
# checking utf32 string with utf16 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf16))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf16))' must be 'utf32_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf16))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf16))' must be 'utf32_general_ci']
# checking utf32 string with utf16le mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf16le))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf16le))' must be 'utf32_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf16le))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf16le))' must be 'utf32_general_ci']
# checking utf32 string with utf32 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING utf32))' must be 'utf32_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING utf32))' must be 'utf32_general_ci']
# checking utf32 string with ucs2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING ucs2))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING ucs2))' must be 'utf32_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING ucs2))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING ucs2))' must be 'utf32_general_ci']
# checking utf32 string with koi8u mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING koi8u))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('Ю' USING koi8u))' must be 'utf32_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING koi8u))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('Ю' USING koi8u))' must be 'utf32_general_ci']
# checking utf32 string with latin2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('@' USING latin2))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('@' USING latin2))' must be 'utf32_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('@' USING latin2))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('@' USING latin2))' must be 'utf32_general_ci']
# checking utf32 string with ascii mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('@' USING ascii))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('@' USING ascii))' must be 'utf32_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('@' USING ascii))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('@' USING ascii))' must be 'utf32_general_ci']
# checking utf32 string with binary mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('@' USING binary))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING utf32), CONVERT('@' USING binary))' must be 'utf32_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('@' USING binary))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING utf32), CONVERT('@' USING binary))' must be 'utf32_general_ci']
# checking ucs2 string with utf8mb4 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf8mb4));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf8mb4))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf8mb4))' must be 'ucs2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf8mb4));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf8mb4))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf8mb4))' must be 'ucs2_general_ci']
# checking ucs2 string with utf8mb3 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf8mb3))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf8mb3))' must be 'ucs2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf8mb3))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf8mb3))' must be 'ucs2_general_ci']
# checking ucs2 string with utf16 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf16));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf16))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf16))' must be 'ucs2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf16));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf16))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf16))' must be 'ucs2_general_ci']
# checking ucs2 string with utf16le mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf16le));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf16le))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf16le))' must be 'ucs2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf16le));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf16le))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf16le))' must be 'ucs2_general_ci']
# checking ucs2 string with utf32 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf32));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf32))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING utf32))' must be 'ucs2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf32));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf32))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING utf32))' must be 'ucs2_general_ci']
# checking ucs2 string with ucs2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING ucs2))' must be 'ucs2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING ucs2))' must be 'ucs2_general_ci']
# checking ucs2 string with koi8u mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING koi8u));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING koi8u))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('Ю' USING koi8u))' must be 'ucs2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING koi8u));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING koi8u))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('Ю' USING koi8u))' must be 'ucs2_general_ci']
# checking ucs2 string with latin2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('@' USING latin2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('@' USING latin2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('@' USING latin2))' must be 'ucs2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('@' USING latin2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('@' USING latin2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('@' USING latin2))' must be 'ucs2_general_ci']
# checking ucs2 string with ascii mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('@' USING ascii));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('@' USING ascii))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('@' USING ascii))' must be 'ucs2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('@' USING ascii));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('@' USING ascii))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('@' USING ascii))' must be 'ucs2_general_ci']
# checking ucs2 string with binary mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('@' USING binary));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('@' USING binary))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ucs2), CONVERT('@' USING binary))' must be 'ucs2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('@' USING binary));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('@' USING binary))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ucs2), CONVERT('@' USING binary))' must be 'ucs2_general_ci']
# checking koi8u string with utf8mb4 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf8mb4))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf8mb4))' must be 'koi8u_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf8mb4))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf8mb4))' must be 'koi8u_general_ci']
# checking koi8u string with utf8mb3 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf8mb3))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf8mb3))' must be 'koi8u_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf8mb3))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf8mb3))' must be 'koi8u_general_ci']
# checking koi8u string with utf16 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf16))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf16))' must be 'koi8u_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf16))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf16))' must be 'koi8u_general_ci']
# checking koi8u string with utf16le mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf16le))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf16le))' must be 'koi8u_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf16le))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf16le))' must be 'koi8u_general_ci']
# checking koi8u string with utf32 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf32))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING utf32))' must be 'koi8u_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf32))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING utf32))' must be 'koi8u_general_ci']
# checking koi8u string with ucs2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING ucs2))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING ucs2))' must be 'koi8u_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING ucs2))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING ucs2))' must be 'koi8u_general_ci']
# checking koi8u string with koi8u mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('Ю' USING koi8u))' must be 'koi8u_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('Ю' USING koi8u))' must be 'koi8u_general_ci']
# checking koi8u string with latin2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('@' USING latin2))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('@' USING latin2))' must be 'koi8u_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('@' USING latin2))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('@' USING latin2))' must be 'koi8u_general_ci']
# checking koi8u string with ascii mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('@' USING ascii))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('@' USING ascii))' must be 'koi8u_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('@' USING ascii))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('@' USING ascii))' must be 'koi8u_general_ci']
# checking koi8u string with binary mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('@' USING binary))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING koi8u), CONVERT('@' USING binary))' must be 'koi8u_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('@' USING binary))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING koi8u), CONVERT('@' USING binary))' must be 'koi8u_general_ci']
# checking latin2 string with utf8mb4 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf8mb4))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf8mb4))' must be 'latin2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf8mb4))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf8mb4))' must be 'latin2_general_ci']
# checking latin2 string with utf8mb3 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf8mb3))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf8mb3))' must be 'latin2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf8mb3))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf8mb3))' must be 'latin2_general_ci']
# checking latin2 string with utf16 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf16))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf16))' must be 'latin2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf16))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf16))' must be 'latin2_general_ci']
# checking latin2 string with utf16le mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf16le))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf16le))' must be 'latin2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf16le))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf16le))' must be 'latin2_general_ci']
# checking latin2 string with utf32 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf32))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING utf32))' must be 'latin2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf32))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING utf32))' must be 'latin2_general_ci']
# checking latin2 string with ucs2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING ucs2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING ucs2))' must be 'latin2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING ucs2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING ucs2))' must be 'latin2_general_ci']
# checking latin2 string with koi8u mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING koi8u))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('Ю' USING koi8u))' must be 'latin2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING koi8u))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('Ю' USING koi8u))' must be 'latin2_general_ci']
# checking latin2 string with latin2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('@' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('@' USING latin2))' must be 'latin2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('@' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('@' USING latin2))' must be 'latin2_general_ci']
# checking latin2 string with ascii mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('@' USING ascii))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('@' USING ascii))' must be 'latin2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('@' USING ascii))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('@' USING ascii))' must be 'latin2_general_ci']
# checking latin2 string with binary mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('@' USING binary))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING latin2), CONVERT('@' USING binary))' must be 'latin2_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('@' USING binary))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING latin2), CONVERT('@' USING binary))' must be 'latin2_general_ci']
# checking ascii string with utf8mb4 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf8mb4))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf8mb4))' must be 'ascii_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf8mb4))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf8mb4))' must be 'ascii_general_ci']
# checking ascii string with utf8mb3 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf8mb3))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf8mb3))' must be 'ascii_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf8mb3))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf8mb3))' must be 'ascii_general_ci']
# checking ascii string with utf16 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf16))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf16))' must be 'ascii_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf16))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf16))' must be 'ascii_general_ci']
# checking ascii string with utf16le mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf16le))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf16le))' must be 'ascii_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf16le))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf16le))' must be 'ascii_general_ci']
# checking ascii string with utf32 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf32))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING utf32))' must be 'ascii_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf32))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING utf32))' must be 'ascii_general_ci']
# checking ascii string with ucs2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING ucs2))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING ucs2))' must be 'ascii_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING ucs2))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING ucs2))' must be 'ascii_general_ci']
# checking ascii string with koi8u mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING koi8u))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('Ю' USING koi8u))' must be 'ascii_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING koi8u))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('Ю' USING koi8u))' must be 'ascii_general_ci']
# checking ascii string with latin2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('@' USING latin2))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('@' USING latin2))' must be 'ascii_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('@' USING latin2))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('@' USING latin2))' must be 'ascii_general_ci']
# checking ascii string with ascii mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('@' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('@' USING ascii))' must be 'ascii_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('@' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('@' USING ascii))' must be 'ascii_general_ci']
# checking ascii string with binary mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('@' USING binary))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING ascii), CONVERT('@' USING binary))' must be 'ascii_general_ci']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('@' USING binary))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING ascii), CONVERT('@' USING binary))' must be 'ascii_general_ci']
# checking binary string with utf8mb4 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf8mb4))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf8mb4))' must be 'binary']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf8mb4))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf8mb4))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf8mb4))' must be 'binary']
# checking binary string with utf8mb3 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf8mb3))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf8mb3))' must be 'binary']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf8mb3))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf8mb3))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf8mb3))' must be 'binary']
# checking binary string with utf16 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf16))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf16))' must be 'binary']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf16))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf16))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf16))' must be 'binary']
# checking binary string with utf16le mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf16le))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf16le))' must be 'binary']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf16le))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf16le))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf16le))' must be 'binary']
# checking binary string with utf32 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf32))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING utf32))' must be 'binary']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf32))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf32))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING utf32))' must be 'binary']
# checking binary string with ucs2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING ucs2))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING ucs2))' must be 'binary']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING ucs2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING ucs2))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING ucs2))' must be 'binary']
# checking binary string with koi8u mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING koi8u))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('Ю' USING koi8u))' must be 'binary']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING koi8u))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING koi8u))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('Ю' USING koi8u))' must be 'binary']
# checking binary string with latin2 mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('@' USING latin2))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('@' USING latin2))' must be 'binary']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('@' USING latin2))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('@' USING latin2))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('@' USING latin2))' must be 'binary']
# checking binary string with ascii mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('@' USING ascii))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('@' USING ascii))' must be 'binary']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('@' USING ascii))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('@' USING ascii))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('@' USING ascii))' must be 'binary']
# checking binary string with binary mask
SET @random_pan = gen_rnd_pan();
SET @check_expression_result = mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('@' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(@random_pan USING binary), CONVERT('@' USING binary))' must be 'binary']
SET @check_expression_result = mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('@' USING binary))' must be equal to '<hidden>']
include/assert.inc [charset of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('@' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_pan_relaxed(CONVERT(INSERT(@random_pan, 9, 0, '-') USING binary), CONVERT('@' USING binary))' must be 'binary']
UNINSTALL COMPONENT 'file://component_masking_functions';
