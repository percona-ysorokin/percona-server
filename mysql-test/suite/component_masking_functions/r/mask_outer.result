#
# Component Masking Functions: mask_outer()
#
INSTALL COMPONENT 'file://component_masking_functions';
# arity checks
SELECT mask_outer();
ERROR HY000: Can't initialize function 'mask_outer'; Wrong argument list: should be (string, int, int [char])
SELECT mask_outer('');
ERROR HY000: Can't initialize function 'mask_outer'; Wrong argument list: should be (string, int, int [char])
SELECT mask_outer('', 42);
ERROR HY000: Can't initialize function 'mask_outer'; Wrong argument list: should be (string, int, int [char])
SELECT mask_outer('', 42, 42, '', '');
ERROR HY000: Can't initialize function 'mask_outer'; Wrong argument list: should be (string, int, int [char])
# argument nullness checks
SELECT mask_outer('', NULL, 42);
ERROR HY000: mask_outer<string> UDF failed; argument 2 cannot be null
SELECT mask_outer('', 42, NULL);
ERROR HY000: mask_outer<string> UDF failed; argument 3 cannot be null
SELECT mask_outer('', NULL, 42, '');
ERROR HY000: mask_outer<string> UDF failed; argument 2 cannot be null
SELECT mask_outer('', 42, NULL, '');
ERROR HY000: mask_outer<string> UDF failed; argument 3 cannot be null
SELECT mask_outer('', 42, 42, NULL);
ERROR HY000: mask_outer<string> UDF failed; argument 4 cannot be null
# constraints checks
SELECT mask_outer('foo', -1, 0);
ERROR HY000: mask_outer<string> UDF failed; Margins can't be negative!
SELECT mask_outer('foo', 0, -1);
ERROR HY000: mask_outer<string> UDF failed; Margins can't be negative!
SELECT mask_outer('foo', 1, 1, '');
ERROR HY000: mask_outer<string> UDF failed; masking character must be of length 1
SELECT mask_outer('foo', 1, 1, ''XX);
ERROR HY000: mask_outer<string> UDF failed; masking character must be of length 1
# NULL for NULL checks
include/assert.inc [mask_outer() for the NULL primary argument should return NULL]
include/assert.inc [mask_outer() for the NULL primary argument and custom mask should return NULL]
# logic checks
SET @check_expression_result = mask_outer('qwerty', 0, 1);
include/assert.inc [the result of evaluating 'mask_outer('qwerty', 0, 1)' must be equal to 'qwertX']
include/assert.inc [charset of the result of evaluating 'mask_outer('qwerty', 0, 1)' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer('qwerty', 0, 1)' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_outer('qwerty', 1, 0);
include/assert.inc [the result of evaluating 'mask_outer('qwerty', 1, 0)' must be equal to 'Xwerty']
include/assert.inc [charset of the result of evaluating 'mask_outer('qwerty', 1, 0)' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer('qwerty', 1, 0)' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_outer('qwerty', 1, 1);
include/assert.inc [the result of evaluating 'mask_outer('qwerty', 1, 1)' must be equal to 'XwertX']
include/assert.inc [charset of the result of evaluating 'mask_outer('qwerty', 1, 1)' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer('qwerty', 1, 1)' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_outer('qwerty', 0, 6);
include/assert.inc [the result of evaluating 'mask_outer('qwerty', 0, 6)' must be equal to 'XXXXXX']
include/assert.inc [charset of the result of evaluating 'mask_outer('qwerty', 0, 6)' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer('qwerty', 0, 6)' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_outer('qwerty', 6, 0);
include/assert.inc [the result of evaluating 'mask_outer('qwerty', 6, 0)' must be equal to 'XXXXXX']
include/assert.inc [charset of the result of evaluating 'mask_outer('qwerty', 6, 0)' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer('qwerty', 6, 0)' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_outer('qwerty', 3, 3);
include/assert.inc [the result of evaluating 'mask_outer('qwerty', 3, 3)' must be equal to 'XXXXXX']
include/assert.inc [charset of the result of evaluating 'mask_outer('qwerty', 3, 3)' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer('qwerty', 3, 3)' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_outer('qwerty', 5, 5);
include/assert.inc [the result of evaluating 'mask_outer('qwerty', 5, 5)' must be equal to 'XXXXXX']
include/assert.inc [charset of the result of evaluating 'mask_outer('qwerty', 5, 5)' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer('qwerty', 5, 5)' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_outer('qwerty', 42, 42);
include/assert.inc [the result of evaluating 'mask_outer('qwerty', 42, 42)' must be equal to 'XXXXXX']
include/assert.inc [charset of the result of evaluating 'mask_outer('qwerty', 42, 42)' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer('qwerty', 42, 42)' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_outer('qwerty', 1, 1, 'Ю');
include/assert.inc [the result of evaluating 'mask_outer('qwerty', 1, 1, 'Ю')' must be equal to 'ЮwertЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer('qwerty', 1, 1, 'Ю')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer('qwerty', 1, 1, 'Ю')' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = mask_outer(_ascii 'qwerty', 1, 1, 'Ю');
include/assert.inc [the result of evaluating 'mask_outer(_ascii 'qwerty', 1, 1, 'Ю')' must be equal to '?wert?']
include/assert.inc [charset of the result of evaluating 'mask_outer(_ascii 'qwerty', 1, 1, 'Ю')' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_outer(_ascii 'qwerty', 1, 1, 'Ю')' must be 'ascii_general_ci']
# character set / collation checks
SET @regular_charset_list = '[ "utf8mb4", "utf8mb3", "utf16", "utf16le", "utf32", "ucs2", "koi8u"]';
SET @special_charset_list = '[ "latin2", "ascii", "binary"]';
SET @charset_list = JSON_MERGE_PRESERVE(@regular_charset_list, @special_charset_list);
# checking utf8mb4 string with utf8mb4 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf8mb4))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with utf8mb3 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf8mb3))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with utf16 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf16))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf16))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf16))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with utf16le mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf16le))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf16le))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf16le))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with utf32 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf32))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf32))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING utf32))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with ucs2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING ucs2))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING ucs2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING ucs2))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with koi8u mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING koi8u))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING koi8u))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('Ю' USING koi8u))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with latin2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('@' USING latin2))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('@' USING latin2))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('@' USING latin2))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with ascii mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('@' USING ascii))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('@' USING ascii))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('@' USING ascii))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb4 string with binary mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('@' USING binary))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('@' USING binary))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb4), 2, 2, CONVERT('@' USING binary))' must be 'utf8mb4_0900_ai_ci']
# checking utf8mb3 string with utf8mb4 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf8mb4));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf8mb4))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with utf8mb3 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf8mb3))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with utf16 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf16));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf16))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf16))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf16))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with utf16le mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf16le));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf16le))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf16le))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf16le))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with utf32 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf32));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf32))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf32))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING utf32))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with ucs2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING ucs2))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING ucs2))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING ucs2))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with koi8u mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING koi8u));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING koi8u))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING koi8u))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('Ю' USING koi8u))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with latin2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('@' USING latin2));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('@' USING latin2))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('@' USING latin2))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('@' USING latin2))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with ascii mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('@' USING ascii));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('@' USING ascii))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('@' USING ascii))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('@' USING ascii))' must be 'utf8mb3_general_ci']
# checking utf8mb3 string with binary mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('@' USING binary));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('@' USING binary))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('@' USING binary))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf8mb3), 2, 2, CONVERT('@' USING binary))' must be 'utf8mb3_general_ci']
# checking utf16 string with utf8mb4 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf8mb4))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'utf16_general_ci']
# checking utf16 string with utf8mb3 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf8mb3))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'utf16_general_ci']
# checking utf16 string with utf16 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf16))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf16))' must be 'utf16_general_ci']
# checking utf16 string with utf16le mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf16le))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf16le))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf16le))' must be 'utf16_general_ci']
# checking utf16 string with utf32 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf32))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf32))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING utf32))' must be 'utf16_general_ci']
# checking utf16 string with ucs2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING ucs2))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING ucs2))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING ucs2))' must be 'utf16_general_ci']
# checking utf16 string with koi8u mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING koi8u))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING koi8u))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('Ю' USING koi8u))' must be 'utf16_general_ci']
# checking utf16 string with latin2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('@' USING latin2))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('@' USING latin2))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('@' USING latin2))' must be 'utf16_general_ci']
# checking utf16 string with ascii mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('@' USING ascii))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('@' USING ascii))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('@' USING ascii))' must be 'utf16_general_ci']
# checking utf16 string with binary mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('@' USING binary))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('@' USING binary))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16), 2, 2, CONVERT('@' USING binary))' must be 'utf16_general_ci']
# checking utf16le string with utf8mb4 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf8mb4))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'utf16le_general_ci']
# checking utf16le string with utf8mb3 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf8mb3))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'utf16le_general_ci']
# checking utf16le string with utf16 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf16))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf16))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf16))' must be 'utf16le_general_ci']
# checking utf16le string with utf16le mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf16le))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf16le))' must be 'utf16le_general_ci']
# checking utf16le string with utf32 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf32))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf32))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING utf32))' must be 'utf16le_general_ci']
# checking utf16le string with ucs2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING ucs2))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING ucs2))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING ucs2))' must be 'utf16le_general_ci']
# checking utf16le string with koi8u mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING koi8u))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING koi8u))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('Ю' USING koi8u))' must be 'utf16le_general_ci']
# checking utf16le string with latin2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('@' USING latin2))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('@' USING latin2))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('@' USING latin2))' must be 'utf16le_general_ci']
# checking utf16le string with ascii mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('@' USING ascii))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('@' USING ascii))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('@' USING ascii))' must be 'utf16le_general_ci']
# checking utf16le string with binary mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('@' USING binary))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('@' USING binary))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf16le), 2, 2, CONVERT('@' USING binary))' must be 'utf16le_general_ci']
# checking utf32 string with utf8mb4 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf8mb4))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'utf32_general_ci']
# checking utf32 string with utf8mb3 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf8mb3))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'utf32_general_ci']
# checking utf32 string with utf16 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf16))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf16))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf16))' must be 'utf32_general_ci']
# checking utf32 string with utf16le mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf16le))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf16le))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf16le))' must be 'utf32_general_ci']
# checking utf32 string with utf32 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf32))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING utf32))' must be 'utf32_general_ci']
# checking utf32 string with ucs2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING ucs2))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING ucs2))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING ucs2))' must be 'utf32_general_ci']
# checking utf32 string with koi8u mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING koi8u))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING koi8u))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('Ю' USING koi8u))' must be 'utf32_general_ci']
# checking utf32 string with latin2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('@' USING latin2))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('@' USING latin2))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('@' USING latin2))' must be 'utf32_general_ci']
# checking utf32 string with ascii mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('@' USING ascii))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('@' USING ascii))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('@' USING ascii))' must be 'utf32_general_ci']
# checking utf32 string with binary mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('@' USING binary))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('@' USING binary))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING utf32), 2, 2, CONVERT('@' USING binary))' must be 'utf32_general_ci']
# checking ucs2 string with utf8mb4 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf8mb4));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf8mb4))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'ucs2_general_ci']
# checking ucs2 string with utf8mb3 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf8mb3))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'ucs2_general_ci']
# checking ucs2 string with utf16 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf16));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf16))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf16))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf16))' must be 'ucs2_general_ci']
# checking ucs2 string with utf16le mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf16le));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf16le))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf16le))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf16le))' must be 'ucs2_general_ci']
# checking ucs2 string with utf32 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf32));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf32))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf32))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING utf32))' must be 'ucs2_general_ci']
# checking ucs2 string with ucs2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING ucs2))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING ucs2))' must be 'ucs2_general_ci']
# checking ucs2 string with koi8u mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING koi8u));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING koi8u))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING koi8u))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('Ю' USING koi8u))' must be 'ucs2_general_ci']
# checking ucs2 string with latin2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('@' USING latin2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('@' USING latin2))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('@' USING latin2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('@' USING latin2))' must be 'ucs2_general_ci']
# checking ucs2 string with ascii mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('@' USING ascii));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('@' USING ascii))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('@' USING ascii))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('@' USING ascii))' must be 'ucs2_general_ci']
# checking ucs2 string with binary mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('@' USING binary));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('@' USING binary))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('@' USING binary))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING ucs2), 2, 2, CONVERT('@' USING binary))' must be 'ucs2_general_ci']
# checking koi8u string with utf8mb4 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf8mb4))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'koi8u_general_ci']
# checking koi8u string with utf8mb3 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf8mb3))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'koi8u_general_ci']
# checking koi8u string with utf16 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf16))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf16))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf16))' must be 'koi8u_general_ci']
# checking koi8u string with utf16le mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf16le))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf16le))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf16le))' must be 'koi8u_general_ci']
# checking koi8u string with utf32 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf32))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf32))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING utf32))' must be 'koi8u_general_ci']
# checking koi8u string with ucs2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING ucs2))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING ucs2))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING ucs2))' must be 'koi8u_general_ci']
# checking koi8u string with koi8u mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING koi8u))' must be equal to 'ЮЮвMySЮЮ']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('Ю' USING koi8u))' must be 'koi8u_general_ci']
# checking koi8u string with latin2 mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('@' USING latin2))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('@' USING latin2))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('@' USING latin2))' must be 'koi8u_general_ci']
# checking koi8u string with ascii mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('@' USING ascii))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('@' USING ascii))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('@' USING ascii))' must be 'koi8u_general_ci']
# checking koi8u string with binary mask
SET @check_expression_result = mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('@' USING binary))' must be equal to '@@вMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('@' USING binary))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('ЛевMySQL' USING koi8u), 2, 2, CONVERT('@' USING binary))' must be 'koi8u_general_ci']
# checking latin2 string with utf8mb4 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf8mb4))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'latin2_general_ci']
# checking latin2 string with utf8mb3 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf8mb3))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'latin2_general_ci']
# checking latin2 string with utf16 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf16))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf16))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf16))' must be 'latin2_general_ci']
# checking latin2 string with utf16le mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf16le))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf16le))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf16le))' must be 'latin2_general_ci']
# checking latin2 string with utf32 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf32))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf32))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING utf32))' must be 'latin2_general_ci']
# checking latin2 string with ucs2 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING ucs2))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING ucs2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING ucs2))' must be 'latin2_general_ci']
# checking latin2 string with koi8u mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING koi8u))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING koi8u))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('Ю' USING koi8u))' must be 'latin2_general_ci']
# checking latin2 string with latin2 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('@' USING latin2))' must be equal to '@@oMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('@' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('@' USING latin2))' must be 'latin2_general_ci']
# checking latin2 string with ascii mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('@' USING ascii))' must be equal to '@@oMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('@' USING ascii))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('@' USING ascii))' must be 'latin2_general_ci']
# checking latin2 string with binary mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('@' USING binary))' must be equal to '@@oMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('@' USING binary))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING latin2), 2, 2, CONVERT('@' USING binary))' must be 'latin2_general_ci']
# checking ascii string with utf8mb4 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf8mb4))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'ascii_general_ci']
# checking ascii string with utf8mb3 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf8mb3))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'ascii_general_ci']
# checking ascii string with utf16 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf16))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf16))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf16))' must be 'ascii_general_ci']
# checking ascii string with utf16le mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf16le))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf16le))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf16le))' must be 'ascii_general_ci']
# checking ascii string with utf32 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf32))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf32))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING utf32))' must be 'ascii_general_ci']
# checking ascii string with ucs2 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING ucs2))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING ucs2))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING ucs2))' must be 'ascii_general_ci']
# checking ascii string with koi8u mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING koi8u))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING koi8u))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('Ю' USING koi8u))' must be 'ascii_general_ci']
# checking ascii string with latin2 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('@' USING latin2))' must be equal to '@@oMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('@' USING latin2))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('@' USING latin2))' must be 'ascii_general_ci']
# checking ascii string with ascii mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('@' USING ascii))' must be equal to '@@oMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('@' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('@' USING ascii))' must be 'ascii_general_ci']
# checking ascii string with binary mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('@' USING binary))' must be equal to '@@oMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('@' USING binary))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING ascii), 2, 2, CONVERT('@' USING binary))' must be 'ascii_general_ci']
# checking binary string with utf8mb4 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf8mb4));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf8mb4))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf8mb4))' must be 'binary']
# checking binary string with utf8mb3 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf8mb3))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf8mb3))' must be 'binary']
# checking binary string with utf16 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf16));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf16))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf16))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf16))' must be 'binary']
# checking binary string with utf16le mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf16le));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf16le))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf16le))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf16le))' must be 'binary']
# checking binary string with utf32 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf32));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf32))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf32))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING utf32))' must be 'binary']
# checking binary string with ucs2 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING ucs2))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING ucs2))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING ucs2))' must be 'binary']
# checking binary string with koi8u mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING koi8u));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING koi8u))' must be equal to '??oMyS??']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING koi8u))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('Ю' USING koi8u))' must be 'binary']
# checking binary string with latin2 mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('@' USING latin2));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('@' USING latin2))' must be equal to '@@oMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('@' USING latin2))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('@' USING latin2))' must be 'binary']
# checking binary string with ascii mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('@' USING ascii));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('@' USING ascii))' must be equal to '@@oMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('@' USING ascii))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('@' USING ascii))' must be 'binary']
# checking binary string with binary mask
SET @check_expression_result = mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('@' USING binary));
include/assert.inc [the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('@' USING binary))' must be equal to '@@oMyS@@']
include/assert.inc [charset of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('@' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'mask_outer(CONVERT('LeoMySQL' USING binary), 2, 2, CONVERT('@' USING binary))' must be 'binary']
UNINSTALL COMPONENT 'file://component_masking_functions';
