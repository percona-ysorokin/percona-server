#
# Component Masking Functions: gen_rnd_email()
#
INSTALL COMPONENT 'file://component_masking_functions';
# arity checks
SELECT gen_rnd_email(42, 42, '', '');
ERROR HY000: Can't initialize function 'gen_rnd_email'; Wrong argument list: should be ([int], [int], [string])
# argument nullness checks
SELECT gen_rnd_email(NULL);
ERROR HY000: gen_rnd_email<string> UDF failed; argument 1 cannot be null
SELECT gen_rnd_email(NULL, 42);
ERROR HY000: gen_rnd_email<string> UDF failed; argument 1 cannot be null
SELECT gen_rnd_email(42, NULL);
ERROR HY000: gen_rnd_email<string> UDF failed; argument 2 cannot be null
SELECT gen_rnd_email(NULL, 42, '');
ERROR HY000: gen_rnd_email<string> UDF failed; argument 1 cannot be null
SELECT gen_rnd_email(42, NULL, '');
ERROR HY000: gen_rnd_email<string> UDF failed; argument 2 cannot be null
SELECT gen_rnd_email(42, 42, NULL);
ERROR HY000: gen_rnd_email<string> UDF failed; argument 3 cannot be null
# constraints checks
SELECT gen_rnd_email(-42);
ERROR HY000: gen_rnd_email<string> UDF failed; Name length must be a positive number
SELECT gen_rnd_email(0);
ERROR HY000: gen_rnd_email<string> UDF failed; Name length must be a positive number
SELECT gen_rnd_email(1025);
ERROR HY000: gen_rnd_email<string> UDF failed; Name length must not exceed 1024
SELECT gen_rnd_email(-42, 42);
ERROR HY000: gen_rnd_email<string> UDF failed; Name length must be a positive number
SELECT gen_rnd_email(0, 42);
ERROR HY000: gen_rnd_email<string> UDF failed; Name length must be a positive number
SELECT gen_rnd_email(1025, 42);
ERROR HY000: gen_rnd_email<string> UDF failed; Name length must not exceed 1024
SELECT gen_rnd_email(42, -42);
ERROR HY000: gen_rnd_email<string> UDF failed; Surname length must be a positive number
SELECT gen_rnd_email(42, 0);
ERROR HY000: gen_rnd_email<string> UDF failed; Surname length must be a positive number
SELECT gen_rnd_email(42, 1025);
ERROR HY000: gen_rnd_email<string> UDF failed; Surname length must not exceed 1024
# logic checks
SET @check_expression_result = gen_rnd_email();
include/assert.inc [the result of evaluating 'gen_rnd_email()' must match the '[[:lower:]]{5}\.[[:lower:]]{7}@example.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email()' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email()' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_rnd_email(2);
include/assert.inc [the result of evaluating 'gen_rnd_email(2)' must match the '[[:lower:]]{2}\.[[:lower:]]{7}@example.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2)' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2)' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_rnd_email(2, 3);
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3)' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@example.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3)' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3)' must be 'utf8mb4_0900_ai_ci']
SET @check_expression_result = gen_rnd_email(2, 3, 'foo.com');
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, 'foo.com')' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, 'foo.com')' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, 'foo.com')' must be 'utf8mb4_0900_ai_ci']
# character set / collation checks
SET @regular_charset_list = '[ "utf8mb4", "utf8mb3", "utf16", "utf16le", "utf32", "ucs2", "koi8u"]';
SET @special_charset_list = '[ "latin2", "ascii", "binary"]';
SET @charset_list = JSON_MERGE_PRESERVE(@regular_charset_list, @special_charset_list);
chacacter set 'utf8mb4': iteration 0
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 1
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 2
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 3
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 4
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 5
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 6
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 7
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 8
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 9
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 10
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 11
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 12
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 13
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 14
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
chacacter set 'utf8mb4': iteration 15
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb4))' must be 'utf8mb4_0900_ai_ci']
################################
chacacter set 'utf8mb3': iteration 0
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 1
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 2
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 3
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 4
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 5
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 6
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 7
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 8
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 9
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 10
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 11
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 12
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 13
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 14
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
chacacter set 'utf8mb3': iteration 15
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3));
Warnings:
Warning	1287	'utf8mb3' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf8mb3))' must be 'utf8mb3_general_ci']
################################
chacacter set 'utf16': iteration 0
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 1
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 2
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 3
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 4
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 5
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 6
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 7
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 8
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 9
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 10
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 11
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 12
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 13
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 14
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
chacacter set 'utf16': iteration 15
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16))' must be 'utf16_general_ci']
################################
chacacter set 'utf16le': iteration 0
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 1
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 2
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 3
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 4
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 5
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 6
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 7
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 8
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 9
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 10
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 11
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 12
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 13
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 14
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
chacacter set 'utf16le': iteration 15
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf16le))' must be 'utf16le_general_ci']
################################
chacacter set 'utf32': iteration 0
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 1
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 2
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 3
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 4
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 5
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 6
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 7
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 8
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 9
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 10
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 11
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 12
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 13
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 14
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
chacacter set 'utf32': iteration 15
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING utf32))' must be 'utf32_general_ci']
################################
chacacter set 'ucs2': iteration 0
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 1
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 2
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 3
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 4
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 5
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 6
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 7
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 8
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 9
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 10
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 11
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 12
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 13
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 14
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
chacacter set 'ucs2': iteration 15
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2));
Warnings:
Warning	1287	'ucs2' is deprecated and will be removed in a future release. Please use utf8mb4 instead
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING ucs2))' must be 'ucs2_general_ci']
################################
chacacter set 'koi8u': iteration 0
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 1
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 2
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 3
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 4
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 5
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 6
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 7
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 8
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 9
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 10
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 11
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 12
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 13
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 14
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
chacacter set 'koi8u': iteration 15
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@юра.ком' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('юра.ком' USING koi8u))' must be 'koi8u_general_ci']
################################
chacacter set 'latin2': iteration 0
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 1
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 2
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 3
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 4
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 5
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 6
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 7
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 8
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 9
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 10
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 11
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 12
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 13
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 14
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
chacacter set 'latin2': iteration 15
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING latin2))' must be 'latin2_general_ci']
################################
chacacter set 'ascii': iteration 0
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 1
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 2
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 3
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 4
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 5
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 6
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 7
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 8
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 9
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 10
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 11
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 12
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 13
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 14
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
chacacter set 'ascii': iteration 15
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING ascii))' must be 'ascii_general_ci']
################################
chacacter set 'binary': iteration 0
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 1
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 2
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 3
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 4
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 5
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 6
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 7
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 8
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 9
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 10
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 11
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 12
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 13
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 14
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
chacacter set 'binary': iteration 15
SET @check_expression_result = gen_rnd_email(2, 3, CONVERT('foo.com' USING binary));
include/assert.inc [the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must match the '[[:lower:]]{2}\.[[:lower:]]{3}@foo.com' pattern]
include/assert.inc [charset of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
include/assert.inc [collation of the result of evaluating 'gen_rnd_email(2, 3, CONVERT('foo.com' USING binary))' must be 'binary']
################################
UNINSTALL COMPONENT 'file://component_masking_functions';
