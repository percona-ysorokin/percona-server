--source include/have_rocksdb.inc
--source include/have_debug_sync.inc

--source include/count_sessions.inc

--connect(con0, localhost, root,, test)
--connection default

let $i = 1;
let $define_row_key = row_key BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,;
let $define_pk = PRIMARY KEY (row_key),;

while ($i <= 2) {

--echo Conn A creating table
eval CREATE TABLE table1 (
  $define_row_key
  val1 TINYINT NOT NULL,
  val2 VARCHAR(128) NOT NULL,
  $define_pk
  KEY idx_val1 (val1)
) ENGINE=RocksDB;

# Conn A: first, create a table with a few rows, keeping the val1 column all the same
INSERT INTO table1 (val1, val2) VALUES (14, 'Alfa'), (14, 'Bravo'), (14, 'Charlie'), (14, 'Delta');
--echo Conn A: `table1` created with 4 rows

--echo Conn A: Table before
SELECT * FROM table1;

# next, start a transaction from Conn A to update the rows based on a SK condition
# to be specific, update val1 to 15 if it's 14
# the update command should be `sent` after activating a DEBUG_SYNC point, so that the
# update gets frozen.

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
START TRANSACTION;
--echo Conn A: Started TRANSACTION A (Update )

set DEBUG_SYNC = "rocksdb_concurrent_upd_or_delete_sk SIGNAL waiting_for_update WAIT_FOR update_done";
--echo Conn A: activate DEBUG_SYNC point rocksdb_concurrent_upd_or_delete_sk

send UPDATE table1 SET val1 = 15 WHERE val1 = 14 AND  val2 = 'Bravo';
--echo Conn A: Sent UPDATE

# Meanwhile, start another transaction from Conn B to update val1 in such a way that
# the parallel transaction from Conn A hits the conflict
--connection con0

--echo Conn B: Start transaction B
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
START TRANSACTION;
--echo Conn B: Started TRANSACTION B (Update)

--echo Conn B: Waiting for Conn A to hit `waiting_for_update`
set DEBUG_SYNC = "now WAIT_FOR waiting_for_update";
--echo Conn B: Conn A triggered `waiting_for_update`
UPDATE table1 SET val1 = 15 WHERE val1 = 14 AND val2 = 'Alfa';
COMMIT;
--echo Conn B: COMMIT for update done

# Unfreeze the Conn A update so that it can hit the conflict, and error out
set DEBUG_SYNC = "now SIGNAL update_done";
--echo Conn B: signalled Conn A with event `update_done`

--connection default
reap;
--echo Conn A: Table after
SELECT * FROM table1;

DROP TABLE table1;

# next, run the above tests a second time without explicitly defining
# the primary key. this tests scenarios around hidden PK.

inc $i;
let $define_row_key = ;
let $define_pk = ;

}

--disconnect con0

--source include/wait_until_count_sessions.inc
