SET @message = 'message';
SET @digest_type = 'SHA224';

** checking 'create_digest()' function basics
CREATE FUNCTION create_digest RETURNS STRING SONAME "ENCRYPTION_UDF_LIB";
SELECT create_digest();
ERROR HY000: Can't initialize function 'create_digest'; Function requires exactly two arguments
SELECT create_digest(@digest_type);
ERROR HY000: Can't initialize function 'create_digest'; Function requires exactly two arguments
SELECT create_digest(@digest_type, NULL);
ERROR HY000: create_digest<string> UDF failed; Message cannot be NULL
SELECT create_digest('FOO', @message);
ERROR HY000: create_digest<string> UDF failed; unknown digest name
SET @random_pattern = REPEAT(MD5(42), 16 * 7 DIV 32 + 1);
** checking digests calculation
CREATE TEMPORARY TABLE digest_type(
id INT UNSIGNED NOT NULL AUTO_INCREMENT,
digest_name VARCHAR(64) NOT NULL,
builtin_template VARCHAR(64),
PRIMARY KEY(id)
);
INSERT INTO digest_type(digest_name, builtin_template) VALUES
('MD5' , 'MD5(@message)'),
('SHA1', 'SHA(@message)'),
('SHA224', 'SHA2(@message, 224)'),
('SHA256', 'SHA2(@message, 256)'),
('SHA384', 'SHA2(@message, 384)'),
('SHA512', 'SHA2(@message, 512)'),
('BLAKE2B512', NULL),
('BLAKE2S256', NULL),
('MD4'       , NULL),
('RIPEMD'    , NULL),
('RIPEMD160' , NULL),
('RMD160'    , NULL),
('SHAKE128'  , NULL),
('SHAKE256'  , NULL),
('SM3'       , NULL),
('WHIRLPOOL' , NULL)
;
**** checking HEX(create_digest("MD5", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF should match built-in function result]
**** checking HEX(create_digest("SHA1", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF should match built-in function result]
**** checking HEX(create_digest("SHA224", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF should match built-in function result]
**** checking HEX(create_digest("SHA256", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF should match built-in function result]
**** checking HEX(create_digest("SHA384", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF should match built-in function result]
**** checking HEX(create_digest("SHA512", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF should match built-in function result]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF should match built-in function result]
**** checking HEX(create_digest("BLAKE2B512", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF is not NULL]
**** checking HEX(create_digest("BLAKE2S256", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF is not NULL]
**** checking HEX(create_digest("MD4", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF is not NULL]
**** checking HEX(create_digest("RIPEMD", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF is not NULL]
**** checking HEX(create_digest("RIPEMD160", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF is not NULL]
**** checking HEX(create_digest("RMD160", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF is not NULL]
**** checking HEX(create_digest("SHAKE128", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF is not NULL]
**** checking HEX(create_digest("SHAKE256", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF is not NULL]
**** checking HEX(create_digest("SM3", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF is not NULL]
**** checking HEX(create_digest("WHIRLPOOL", @message)) digest
****** checking digest calculation on 0 - byte(s) message
SET @message = LEFT(@random_pattern, 0);
include/assert.inc [digest of a message of length 0 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 7 - byte(s) message
SET @message = LEFT(@random_pattern, 7);
include/assert.inc [digest of a message of length 7 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 14 - byte(s) message
SET @message = LEFT(@random_pattern, 14);
include/assert.inc [digest of a message of length 14 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 21 - byte(s) message
SET @message = LEFT(@random_pattern, 21);
include/assert.inc [digest of a message of length 21 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 28 - byte(s) message
SET @message = LEFT(@random_pattern, 28);
include/assert.inc [digest of a message of length 28 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 35 - byte(s) message
SET @message = LEFT(@random_pattern, 35);
include/assert.inc [digest of a message of length 35 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 42 - byte(s) message
SET @message = LEFT(@random_pattern, 42);
include/assert.inc [digest of a message of length 42 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 49 - byte(s) message
SET @message = LEFT(@random_pattern, 49);
include/assert.inc [digest of a message of length 49 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 56 - byte(s) message
SET @message = LEFT(@random_pattern, 56);
include/assert.inc [digest of a message of length 56 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 63 - byte(s) message
SET @message = LEFT(@random_pattern, 63);
include/assert.inc [digest of a message of length 63 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 70 - byte(s) message
SET @message = LEFT(@random_pattern, 70);
include/assert.inc [digest of a message of length 70 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 77 - byte(s) message
SET @message = LEFT(@random_pattern, 77);
include/assert.inc [digest of a message of length 77 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 84 - byte(s) message
SET @message = LEFT(@random_pattern, 84);
include/assert.inc [digest of a message of length 84 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 91 - byte(s) message
SET @message = LEFT(@random_pattern, 91);
include/assert.inc [digest of a message of length 91 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 98 - byte(s) message
SET @message = LEFT(@random_pattern, 98);
include/assert.inc [digest of a message of length 98 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 105 - byte(s) message
SET @message = LEFT(@random_pattern, 105);
include/assert.inc [digest of a message of length 105 - byte(s) calculated via UDF is not NULL]
****** checking digest calculation on 112 - byte(s) message
SET @message = LEFT(@random_pattern, 112);
include/assert.inc [digest of a message of length 112 - byte(s) calculated via UDF is not NULL]
SET @algorithm = 'RSA';
SET @message = 'message';

** checking 'create_asymmetric_priv_key()' function basics
CREATE FUNCTION create_asymmetric_priv_key RETURNS STRING SONAME "ENCRYPTION_UDF_LIB";
SELECT create_asymmetric_priv_key();
ERROR HY000: Can't initialize function 'create_asymmetric_priv_key'; Function requires exactly two arguments
SELECT create_asymmetric_priv_key(@algorithm);
ERROR HY000: Can't initialize function 'create_asymmetric_priv_key'; Function requires exactly two arguments
SELECT create_asymmetric_priv_key(@algorithm, NULL);
ERROR HY000: create_asymmetric_priv_key<string> UDF failed; Key length cannot be NULL
SELECT create_asymmetric_priv_key(@algorithm, 0);
ERROR HY000: create_asymmetric_priv_key<string> UDF failed; Invalid key length specified
SELECT create_asymmetric_priv_key(@algorithm, -1);
ERROR HY000: create_asymmetric_priv_key<string> UDF failed; Invalid key length specified
SELECT create_asymmetric_priv_key(@algorithm, 'blah');
ERROR HY000: create_asymmetric_priv_key<string> UDF failed; Invalid key length specified
SELECT create_asymmetric_priv_key(@algorithm, 1023);
ERROR HY000: create_asymmetric_priv_key<string> UDF failed; Invalid key length specified
SELECT create_asymmetric_priv_key(@algorithm, 16385);
ERROR HY000: create_asymmetric_priv_key<string> UDF failed; Invalid key length specified

** checking 'create_asymmetric_pub_key()' function basics
CREATE FUNCTION create_asymmetric_pub_key RETURNS STRING SONAME "ENCRYPTION_UDF_LIB";
SELECT create_asymmetric_pub_key();
ERROR HY000: Can't initialize function 'create_asymmetric_pub_key'; Function requires exactly two arguments
SELECT create_asymmetric_pub_key(@algorithm);
ERROR HY000: Can't initialize function 'create_asymmetric_pub_key'; Function requires exactly two arguments
SELECT create_asymmetric_pub_key(@algorithm, NULL);
ERROR HY000: create_asymmetric_pub_key<string> UDF failed; cannot import RSA key from PEM PRIVATE KEY: error:0909006C:PEM routines:get_name:no start line
SELECT create_asymmetric_pub_key(@algorithm, 42);
ERROR HY000: create_asymmetric_pub_key<string> UDF failed; cannot import RSA key from PEM PRIVATE KEY: error:0909006C:PEM routines:get_name:no start line
SELECT create_asymmetric_pub_key(@algorithm, 'blah-blah');
ERROR HY000: create_asymmetric_pub_key<string> UDF failed; cannot import RSA key from PEM PRIVATE KEY: error:0909006C:PEM routines:get_name:no start line
SELECT create_asymmetric_priv_key('FOO', 2048);
ERROR HY000: create_asymmetric_priv_key<string> UDF failed; Invalid algorithm specified

** checking 'asymmetric_encrypt()' function basics
CREATE FUNCTION asymmetric_encrypt RETURNS STRING SONAME "ENCRYPTION_UDF_LIB";
SELECT asymmetric_encrypt();
ERROR HY000: Can't initialize function 'asymmetric_encrypt'; Function requires exactly three arguments
SELECT asymmetric_encrypt(@algorithm);
ERROR HY000: Can't initialize function 'asymmetric_encrypt'; Function requires exactly three arguments
SELECT asymmetric_encrypt(@algorithm, @message);
ERROR HY000: Can't initialize function 'asymmetric_encrypt'; Function requires exactly three arguments
SELECT asymmetric_encrypt(@algorithm, @message, NULL);
ERROR HY000: asymmetric_encrypt<string> UDF failed; Key cannot be NULL
SELECT asymmetric_encrypt(@algorithm, @message, 42);
ERROR HY000: asymmetric_encrypt<string> UDF failed; cannot import RSA key from PEM PUBLIC KEY: error:0909006C:PEM routines:get_name:no start line
SELECT asymmetric_encrypt(@algorithm, @message, 'blah-blah');
ERROR HY000: asymmetric_encrypt<string> UDF failed; cannot import RSA key from PEM PUBLIC KEY: error:0909006C:PEM routines:get_name:no start line
SELECT asymmetric_encrypt(@algorithm, NULL, NULL);
ERROR HY000: asymmetric_encrypt<string> UDF failed; Message cannot be NULL

** checking 'asymmetric_decrypt()' function basics
CREATE FUNCTION asymmetric_decrypt RETURNS STRING SONAME "ENCRYPTION_UDF_LIB";
SELECT asymmetric_decrypt();
ERROR HY000: Can't initialize function 'asymmetric_decrypt'; Function requires exactly three arguments
SELECT asymmetric_decrypt(@algorithm);
ERROR HY000: Can't initialize function 'asymmetric_decrypt'; Function requires exactly three arguments
SELECT asymmetric_decrypt(@algorithm, @message);
ERROR HY000: Can't initialize function 'asymmetric_decrypt'; Function requires exactly three arguments
SELECT asymmetric_decrypt(@algorithm, @message, NULL);
ERROR HY000: asymmetric_decrypt<string> UDF failed; Key cannot be NULL
SELECT asymmetric_decrypt(@algorithm, @message, 42);
ERROR HY000: asymmetric_decrypt<string> UDF failed; cannot import RSA key from PEM PUBLIC KEY: error:0909006C:PEM routines:get_name:no start line
SELECT asymmetric_decrypt(@algorithm, @message, 'blah-blah');
ERROR HY000: asymmetric_decrypt<string> UDF failed; cannot import RSA key from PEM PUBLIC KEY: error:0909006C:PEM routines:get_name:no start line
SELECT asymmetric_decrypt(@algorithm, NULL, NULL);
ERROR HY000: asymmetric_decrypt<string> UDF failed; Message cannot be NULL

** checking 'asymmetric_sign()' function basics
CREATE FUNCTION asymmetric_sign RETURNS STRING SONAME "ENCRYPTION_UDF_LIB";
SET @message_digest = create_digest(@digest_type, @message);
SET @rsa_priv = create_asymmetric_priv_key(@algorithm, 1024);
SELECT asymmetric_sign();
ERROR HY000: Can't initialize function 'asymmetric_sign'; Function requires exactly four arguments
SELECT asymmetric_sign(@algorithm);
ERROR HY000: Can't initialize function 'asymmetric_sign'; Function requires exactly four arguments
SELECT asymmetric_sign(@algorithm, @message_digest);
ERROR HY000: Can't initialize function 'asymmetric_sign'; Function requires exactly four arguments
SELECT asymmetric_sign(@algorithm, @message_digest, @rsa_priv);
ERROR HY000: Can't initialize function 'asymmetric_sign'; Function requires exactly four arguments
SELECT asymmetric_sign(NULL, @message_digest, @rsa_priv, @digest_type);
ERROR HY000: asymmetric_sign<string> UDF failed; Algorithm cannot be NULL
SELECT asymmetric_sign(42, @message_digest, @rsa_priv, @digest_type);
ERROR HY000: asymmetric_sign<string> UDF failed; Invalid algorithm specified
SELECT asymmetric_sign('XSA', @message_digest, @rsa_priv, @digest_type);
ERROR HY000: asymmetric_sign<string> UDF failed; Invalid algorithm specified
SELECT asymmetric_sign(@algorithm, NULL, @rsa_priv, @digest_type);
ERROR HY000: asymmetric_sign<string> UDF failed; Message digest cannot be NULL
SELECT asymmetric_sign(@algorithm, @message_digest, NULL, @digest_type);
ERROR HY000: asymmetric_sign<string> UDF failed; Private key cannot be NULL
SELECT asymmetric_sign(@algorithm, @message_digest, 42, @digest_type);
ERROR HY000: asymmetric_sign<string> UDF failed; cannot import RSA key from PEM PRIVATE KEY: error:0909006C:PEM routines:get_name:no start line
SELECT asymmetric_sign(@algorithm, @message_digest, 'blah-blah', @digest_type);
ERROR HY000: asymmetric_sign<string> UDF failed; cannot import RSA key from PEM PRIVATE KEY: error:0909006C:PEM routines:get_name:no start line
SELECT asymmetric_sign(@algorithm, @message_digest, @rsa_priv, NULL);
ERROR HY000: asymmetric_sign<string> UDF failed; Digest type cannot be NULL
SELECT asymmetric_sign(@algorithm, @message_digest, @rsa_priv, 42);
ERROR HY000: asymmetric_sign<string> UDF failed; unknown digest name
SELECT asymmetric_sign(@algorithm, @message_digest, @rsa_priv, 'SHAX');
ERROR HY000: asymmetric_sign<string> UDF failed; unknown digest name

** checking 'asymmetric_verify()' function basics
CREATE FUNCTION asymmetric_verify RETURNS INTEGER SONAME "ENCRYPTION_UDF_LIB";
SET @signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
SET @rsa_pub = create_asymmetric_pub_key(@algorithm, @rsa_priv);
SELECT asymmetric_verify();
ERROR HY000: Can't initialize function 'asymmetric_verify'; Function requires exactly five arguments
SELECT asymmetric_verify(@algorithm);
ERROR HY000: Can't initialize function 'asymmetric_verify'; Function requires exactly five arguments
SELECT asymmetric_verify(@algorithm, @message_digest);
ERROR HY000: Can't initialize function 'asymmetric_verify'; Function requires exactly five arguments
SELECT asymmetric_verify(@algorithm, @message_digest, @signature);
ERROR HY000: Can't initialize function 'asymmetric_verify'; Function requires exactly five arguments
SELECT asymmetric_verify(@algorithm, @message_digest, @signature, @rsa_pub);
ERROR HY000: Can't initialize function 'asymmetric_verify'; Function requires exactly five arguments
SELECT asymmetric_verify(NULL, @message_digest, @signature, @rsa_pub, @digest_type);
ERROR HY000: asymmetric_verify<int> UDF failed; Algorithm cannot be NULL
SELECT asymmetric_verify(42, @message_digest, @signature, @rsa_pub, @digest_type);
ERROR HY000: asymmetric_verify<int> UDF failed; Invalid algorithm specified
SELECT asymmetric_verify('XSA', @message_digest, @signature, @rsa_pub, @digest_type);
ERROR HY000: asymmetric_verify<int> UDF failed; Invalid algorithm specified
SELECT asymmetric_verify(@algorithm, NULL, @signature, @rsa_pub, @digest_type);
ERROR HY000: asymmetric_verify<int> UDF failed; Message digest cannot be NULL
SELECT asymmetric_verify(@algorithm, @message_digest, NULL, @rsa_pub, @digest_type);
ERROR HY000: asymmetric_verify<int> UDF failed; Signature cannot be NULL
SELECT asymmetric_verify(@algorithm, @message_digest, @signature, NULL, @digest_type);
ERROR HY000: asymmetric_verify<int> UDF failed; Puclic key cannot be NULL
SELECT asymmetric_verify(@algorithm, @message_digest, @signature, 42, @digest_type);
ERROR HY000: asymmetric_verify<int> UDF failed; cannot import RSA key from PEM PUBLIC KEY: error:0909006C:PEM routines:get_name:no start line
SELECT asymmetric_verify(@algorithm, @message_digest, @signature, 'blah-blah', @digest_type);
ERROR HY000: asymmetric_verify<int> UDF failed; cannot import RSA key from PEM PUBLIC KEY: error:0909006C:PEM routines:get_name:no start line
SELECT asymmetric_verify(@algorithm, @message_digest, @signature, @rsa_pub, NULL);
ERROR HY000: asymmetric_verify<int> UDF failed; Digest type cannot be NULL
SELECT asymmetric_verify(@algorithm, @message_digest, @signature, @rsa_pub, 42);
ERROR HY000: asymmetric_verify<int> UDF failed; unknown digest name
SELECT asymmetric_verify(@algorithm, @message_digest, @signature, @rsa_pub, 'SHAX');
ERROR HY000: asymmetric_verify<int> UDF failed; unknown digest name

** checking private key generation, public key derivation and encryption/decryption functionality
**** generating 1024 - bit private key
SET @rsa_priv = create_asymmetric_priv_key(@algorithm, 1024);
**** deriving 1024 - bit public key
SET @rsa_pub = create_asymmetric_pub_key(@algorithm, @rsa_priv);
SET @random_pattern = REPEAT(MD5(42), 117 DIV 32 + 1);
**** checking operations on NULL message
SET @message = NULL;
****** checking encryption of NULL message with public key
SELECT asymmetric_encrypt(@algorithm, @message, @rsa_pub);
ERROR HY000: asymmetric_encrypt<string> UDF failed; Message cannot be NULL
****** checking encryption of NULL message with private key
SELECT asymmetric_encrypt(@algorithm, @message, @rsa_priv);
ERROR HY000: asymmetric_encrypt<string> UDF failed; Message cannot be NULL
SET @message = LEFT(@random_pattern, 0);
**** checking operations on 0 - byte(s) message
****** checking encryption of 0 - byte(s) message with public key
SET @message_enc_with_rsa_pub = asymmetric_encrypt(@algorithm, @message, @rsa_pub);
****** checking decryption of 0 - byte(s) message with private key
SET @message_dec_with_rsa_priv = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_pub, @rsa_priv);
include/assert.inc [message of length 0 - byte(s) decrypted with private key must match the original one]
****** checking encryption of 0 - byte(s) message with private key
SET @message_enc_with_rsa_priv = asymmetric_encrypt(@algorithm, @message, @rsa_priv);
****** checking decryption of 0 - byte(s) message with public key
SET @message_dec_with_rsa_pub = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_priv, @rsa_pub);
include/assert.inc [message of length 0 - byte(s) decrypted with public key must match the original one]
****** checking sign/verify functionality of a 0 - byte(s) message
******** calculating MD5 digest a 0 - byte(s) message
SET @digest_type = 'MD5';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD5 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD5 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD5 digest of a 0 - byte(s) message must pass verification]
******** calculating SHA1 digest a 0 - byte(s) message
SET @digest_type = 'SHA1';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA1 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA1 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA1 digest of a 0 - byte(s) message must pass verification]
******** calculating SHA224 digest a 0 - byte(s) message
SET @digest_type = 'SHA224';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA224 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA224 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA224 digest of a 0 - byte(s) message must pass verification]
******** calculating SHA256 digest a 0 - byte(s) message
SET @digest_type = 'SHA256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA256 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA256 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA256 digest of a 0 - byte(s) message must pass verification]
******** calculating SHA384 digest a 0 - byte(s) message
SET @digest_type = 'SHA384';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA384 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA384 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA384 digest of a 0 - byte(s) message must pass verification]
******** calculating SHA512 digest a 0 - byte(s) message
SET @digest_type = 'SHA512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA512 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA512 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA512 digest of a 0 - byte(s) message must pass verification]
******** calculating BLAKE2B512 digest a 0 - byte(s) message
SET @digest_type = 'BLAKE2B512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2B512 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2B512 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2B512 digest of a 0 - byte(s) message must pass verification]
******** calculating BLAKE2S256 digest a 0 - byte(s) message
SET @digest_type = 'BLAKE2S256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2S256 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2S256 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2S256 digest of a 0 - byte(s) message must pass verification]
******** calculating MD4 digest a 0 - byte(s) message
SET @digest_type = 'MD4';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD4 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD4 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD4 digest of a 0 - byte(s) message must pass verification]
******** calculating RIPEMD digest a 0 - byte(s) message
SET @digest_type = 'RIPEMD';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD digest of a 0 - byte(s) message must pass verification]
******** calculating RIPEMD160 digest a 0 - byte(s) message
SET @digest_type = 'RIPEMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD160 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD160 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD160 digest of a 0 - byte(s) message must pass verification]
******** calculating RMD160 digest a 0 - byte(s) message
SET @digest_type = 'RMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RMD160 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RMD160 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RMD160 digest of a 0 - byte(s) message must pass verification]
******** calculating SHAKE128 digest a 0 - byte(s) message
SET @digest_type = 'SHAKE128';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE128 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE128 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE128 digest of a 0 - byte(s) message must pass verification]
******** calculating SHAKE256 digest a 0 - byte(s) message
SET @digest_type = 'SHAKE256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE256 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE256 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE256 digest of a 0 - byte(s) message must pass verification]
******** calculating SM3 digest a 0 - byte(s) message
SET @digest_type = 'SM3';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SM3 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SM3 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SM3 digest of a 0 - byte(s) message must pass verification]
******** calculating WHIRLPOOL digest a 0 - byte(s) message
SET @digest_type = 'WHIRLPOOL';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the WHIRLPOOL digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe WHIRLPOOL digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the WHIRLPOOL digest of a 0 - byte(s) message must pass verification]
SET @message = LEFT(@random_pattern, 1);
**** checking operations on 1 - byte(s) message
****** checking encryption of 1 - byte(s) message with public key
SET @message_enc_with_rsa_pub = asymmetric_encrypt(@algorithm, @message, @rsa_pub);
****** checking decryption of 1 - byte(s) message with private key
SET @message_dec_with_rsa_priv = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_pub, @rsa_priv);
include/assert.inc [message of length 1 - byte(s) decrypted with private key must match the original one]
****** checking encryption of 1 - byte(s) message with private key
SET @message_enc_with_rsa_priv = asymmetric_encrypt(@algorithm, @message, @rsa_priv);
****** checking decryption of 1 - byte(s) message with public key
SET @message_dec_with_rsa_pub = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_priv, @rsa_pub);
include/assert.inc [message of length 1 - byte(s) decrypted with public key must match the original one]
****** checking sign/verify functionality of a 1 - byte(s) message
******** calculating MD5 digest a 1 - byte(s) message
SET @digest_type = 'MD5';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD5 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD5 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD5 digest of a 1 - byte(s) message must pass verification]
******** calculating SHA1 digest a 1 - byte(s) message
SET @digest_type = 'SHA1';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA1 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA1 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA1 digest of a 1 - byte(s) message must pass verification]
******** calculating SHA224 digest a 1 - byte(s) message
SET @digest_type = 'SHA224';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA224 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA224 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA224 digest of a 1 - byte(s) message must pass verification]
******** calculating SHA256 digest a 1 - byte(s) message
SET @digest_type = 'SHA256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA256 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA256 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA256 digest of a 1 - byte(s) message must pass verification]
******** calculating SHA384 digest a 1 - byte(s) message
SET @digest_type = 'SHA384';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA384 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA384 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA384 digest of a 1 - byte(s) message must pass verification]
******** calculating SHA512 digest a 1 - byte(s) message
SET @digest_type = 'SHA512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA512 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA512 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA512 digest of a 1 - byte(s) message must pass verification]
******** calculating BLAKE2B512 digest a 1 - byte(s) message
SET @digest_type = 'BLAKE2B512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2B512 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2B512 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2B512 digest of a 1 - byte(s) message must pass verification]
******** calculating BLAKE2S256 digest a 1 - byte(s) message
SET @digest_type = 'BLAKE2S256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2S256 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2S256 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2S256 digest of a 1 - byte(s) message must pass verification]
******** calculating MD4 digest a 1 - byte(s) message
SET @digest_type = 'MD4';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD4 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD4 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD4 digest of a 1 - byte(s) message must pass verification]
******** calculating RIPEMD digest a 1 - byte(s) message
SET @digest_type = 'RIPEMD';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD digest of a 1 - byte(s) message must pass verification]
******** calculating RIPEMD160 digest a 1 - byte(s) message
SET @digest_type = 'RIPEMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD160 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD160 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD160 digest of a 1 - byte(s) message must pass verification]
******** calculating RMD160 digest a 1 - byte(s) message
SET @digest_type = 'RMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RMD160 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RMD160 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RMD160 digest of a 1 - byte(s) message must pass verification]
******** calculating SHAKE128 digest a 1 - byte(s) message
SET @digest_type = 'SHAKE128';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE128 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE128 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE128 digest of a 1 - byte(s) message must pass verification]
******** calculating SHAKE256 digest a 1 - byte(s) message
SET @digest_type = 'SHAKE256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE256 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE256 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE256 digest of a 1 - byte(s) message must pass verification]
******** calculating SM3 digest a 1 - byte(s) message
SET @digest_type = 'SM3';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SM3 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SM3 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SM3 digest of a 1 - byte(s) message must pass verification]
******** calculating WHIRLPOOL digest a 1 - byte(s) message
SET @digest_type = 'WHIRLPOOL';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the WHIRLPOOL digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe WHIRLPOOL digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the WHIRLPOOL digest of a 1 - byte(s) message must pass verification]
SET @message = LEFT(@random_pattern, 58);
**** checking operations on 58 - byte(s) message
****** checking encryption of 58 - byte(s) message with public key
SET @message_enc_with_rsa_pub = asymmetric_encrypt(@algorithm, @message, @rsa_pub);
****** checking decryption of 58 - byte(s) message with private key
SET @message_dec_with_rsa_priv = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_pub, @rsa_priv);
include/assert.inc [message of length 58 - byte(s) decrypted with private key must match the original one]
****** checking encryption of 58 - byte(s) message with private key
SET @message_enc_with_rsa_priv = asymmetric_encrypt(@algorithm, @message, @rsa_priv);
****** checking decryption of 58 - byte(s) message with public key
SET @message_dec_with_rsa_pub = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_priv, @rsa_pub);
include/assert.inc [message of length 58 - byte(s) decrypted with public key must match the original one]
****** checking sign/verify functionality of a 58 - byte(s) message
******** calculating MD5 digest a 58 - byte(s) message
SET @digest_type = 'MD5';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD5 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD5 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD5 digest of a 58 - byte(s) message must pass verification]
******** calculating SHA1 digest a 58 - byte(s) message
SET @digest_type = 'SHA1';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA1 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA1 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA1 digest of a 58 - byte(s) message must pass verification]
******** calculating SHA224 digest a 58 - byte(s) message
SET @digest_type = 'SHA224';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA224 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA224 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA224 digest of a 58 - byte(s) message must pass verification]
******** calculating SHA256 digest a 58 - byte(s) message
SET @digest_type = 'SHA256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA256 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA256 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA256 digest of a 58 - byte(s) message must pass verification]
******** calculating SHA384 digest a 58 - byte(s) message
SET @digest_type = 'SHA384';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA384 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA384 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA384 digest of a 58 - byte(s) message must pass verification]
******** calculating SHA512 digest a 58 - byte(s) message
SET @digest_type = 'SHA512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA512 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA512 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA512 digest of a 58 - byte(s) message must pass verification]
******** calculating BLAKE2B512 digest a 58 - byte(s) message
SET @digest_type = 'BLAKE2B512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2B512 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2B512 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2B512 digest of a 58 - byte(s) message must pass verification]
******** calculating BLAKE2S256 digest a 58 - byte(s) message
SET @digest_type = 'BLAKE2S256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2S256 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2S256 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2S256 digest of a 58 - byte(s) message must pass verification]
******** calculating MD4 digest a 58 - byte(s) message
SET @digest_type = 'MD4';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD4 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD4 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD4 digest of a 58 - byte(s) message must pass verification]
******** calculating RIPEMD digest a 58 - byte(s) message
SET @digest_type = 'RIPEMD';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD digest of a 58 - byte(s) message must pass verification]
******** calculating RIPEMD160 digest a 58 - byte(s) message
SET @digest_type = 'RIPEMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD160 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD160 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD160 digest of a 58 - byte(s) message must pass verification]
******** calculating RMD160 digest a 58 - byte(s) message
SET @digest_type = 'RMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RMD160 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RMD160 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RMD160 digest of a 58 - byte(s) message must pass verification]
******** calculating SHAKE128 digest a 58 - byte(s) message
SET @digest_type = 'SHAKE128';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE128 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE128 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE128 digest of a 58 - byte(s) message must pass verification]
******** calculating SHAKE256 digest a 58 - byte(s) message
SET @digest_type = 'SHAKE256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE256 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE256 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE256 digest of a 58 - byte(s) message must pass verification]
******** calculating SM3 digest a 58 - byte(s) message
SET @digest_type = 'SM3';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SM3 digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SM3 digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SM3 digest of a 58 - byte(s) message must pass verification]
******** calculating WHIRLPOOL digest a 58 - byte(s) message
SET @digest_type = 'WHIRLPOOL';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the WHIRLPOOL digest of a 58 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe WHIRLPOOL digest of a 58 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the WHIRLPOOL digest of a 58 - byte(s) message must pass verification]
SET @message = LEFT(@random_pattern, 117);
**** checking operations on 117 - byte(s) message
****** checking encryption of 117 - byte(s) message with public key
SET @message_enc_with_rsa_pub = asymmetric_encrypt(@algorithm, @message, @rsa_pub);
****** checking decryption of 117 - byte(s) message with private key
SET @message_dec_with_rsa_priv = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_pub, @rsa_priv);
include/assert.inc [message of length 117 - byte(s) decrypted with private key must match the original one]
****** checking encryption of 117 - byte(s) message with private key
SET @message_enc_with_rsa_priv = asymmetric_encrypt(@algorithm, @message, @rsa_priv);
****** checking decryption of 117 - byte(s) message with public key
SET @message_dec_with_rsa_pub = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_priv, @rsa_pub);
include/assert.inc [message of length 117 - byte(s) decrypted with public key must match the original one]
****** checking sign/verify functionality of a 117 - byte(s) message
******** calculating MD5 digest a 117 - byte(s) message
SET @digest_type = 'MD5';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD5 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD5 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD5 digest of a 117 - byte(s) message must pass verification]
******** calculating SHA1 digest a 117 - byte(s) message
SET @digest_type = 'SHA1';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA1 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA1 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA1 digest of a 117 - byte(s) message must pass verification]
******** calculating SHA224 digest a 117 - byte(s) message
SET @digest_type = 'SHA224';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA224 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA224 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA224 digest of a 117 - byte(s) message must pass verification]
******** calculating SHA256 digest a 117 - byte(s) message
SET @digest_type = 'SHA256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA256 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA256 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA256 digest of a 117 - byte(s) message must pass verification]
******** calculating SHA384 digest a 117 - byte(s) message
SET @digest_type = 'SHA384';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA384 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA384 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA384 digest of a 117 - byte(s) message must pass verification]
******** calculating SHA512 digest a 117 - byte(s) message
SET @digest_type = 'SHA512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA512 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA512 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA512 digest of a 117 - byte(s) message must pass verification]
******** calculating BLAKE2B512 digest a 117 - byte(s) message
SET @digest_type = 'BLAKE2B512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2B512 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2B512 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2B512 digest of a 117 - byte(s) message must pass verification]
******** calculating BLAKE2S256 digest a 117 - byte(s) message
SET @digest_type = 'BLAKE2S256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2S256 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2S256 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2S256 digest of a 117 - byte(s) message must pass verification]
******** calculating MD4 digest a 117 - byte(s) message
SET @digest_type = 'MD4';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD4 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD4 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD4 digest of a 117 - byte(s) message must pass verification]
******** calculating RIPEMD digest a 117 - byte(s) message
SET @digest_type = 'RIPEMD';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD digest of a 117 - byte(s) message must pass verification]
******** calculating RIPEMD160 digest a 117 - byte(s) message
SET @digest_type = 'RIPEMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD160 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD160 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD160 digest of a 117 - byte(s) message must pass verification]
******** calculating RMD160 digest a 117 - byte(s) message
SET @digest_type = 'RMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RMD160 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RMD160 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RMD160 digest of a 117 - byte(s) message must pass verification]
******** calculating SHAKE128 digest a 117 - byte(s) message
SET @digest_type = 'SHAKE128';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE128 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE128 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE128 digest of a 117 - byte(s) message must pass verification]
******** calculating SHAKE256 digest a 117 - byte(s) message
SET @digest_type = 'SHAKE256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE256 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE256 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE256 digest of a 117 - byte(s) message must pass verification]
******** calculating SM3 digest a 117 - byte(s) message
SET @digest_type = 'SM3';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SM3 digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SM3 digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SM3 digest of a 117 - byte(s) message must pass verification]
******** calculating WHIRLPOOL digest a 117 - byte(s) message
SET @digest_type = 'WHIRLPOOL';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the WHIRLPOOL digest of a 117 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe WHIRLPOOL digest of a 117 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the WHIRLPOOL digest of a 117 - byte(s) message must pass verification]
**** checking operations on oversize message
SET @message = LEFT(@random_pattern, 117 + 1);
****** checking encryption of oversize message with public key
SELECT asymmetric_encrypt(@algorithm, @message, @rsa_pub);
ERROR HY000: asymmetric_encrypt<string> UDF failed; encryption block size is too long for the specified padding and RSA key
****** checking encryption of oversize message with private key
SELECT asymmetric_encrypt(@algorithm, @message, @rsa_priv);
ERROR HY000: asymmetric_encrypt<string> UDF failed; encryption block size is too long for the specified padding and RSA key
**** generating 4096 - bit private key
SET @rsa_priv = create_asymmetric_priv_key(@algorithm, 4096);
**** deriving 4096 - bit public key
SET @rsa_pub = create_asymmetric_pub_key(@algorithm, @rsa_priv);
SET @random_pattern = REPEAT(MD5(42), 501 DIV 32 + 1);
**** checking operations on NULL message
SET @message = NULL;
****** checking encryption of NULL message with public key
SELECT asymmetric_encrypt(@algorithm, @message, @rsa_pub);
ERROR HY000: asymmetric_encrypt<string> UDF failed; Message cannot be NULL
****** checking encryption of NULL message with private key
SELECT asymmetric_encrypt(@algorithm, @message, @rsa_priv);
ERROR HY000: asymmetric_encrypt<string> UDF failed; Message cannot be NULL
SET @message = LEFT(@random_pattern, 0);
**** checking operations on 0 - byte(s) message
****** checking encryption of 0 - byte(s) message with public key
SET @message_enc_with_rsa_pub = asymmetric_encrypt(@algorithm, @message, @rsa_pub);
****** checking decryption of 0 - byte(s) message with private key
SET @message_dec_with_rsa_priv = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_pub, @rsa_priv);
include/assert.inc [message of length 0 - byte(s) decrypted with private key must match the original one]
****** checking encryption of 0 - byte(s) message with private key
SET @message_enc_with_rsa_priv = asymmetric_encrypt(@algorithm, @message, @rsa_priv);
****** checking decryption of 0 - byte(s) message with public key
SET @message_dec_with_rsa_pub = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_priv, @rsa_pub);
include/assert.inc [message of length 0 - byte(s) decrypted with public key must match the original one]
****** checking sign/verify functionality of a 0 - byte(s) message
******** calculating MD5 digest a 0 - byte(s) message
SET @digest_type = 'MD5';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD5 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD5 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD5 digest of a 0 - byte(s) message must pass verification]
******** calculating SHA1 digest a 0 - byte(s) message
SET @digest_type = 'SHA1';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA1 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA1 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA1 digest of a 0 - byte(s) message must pass verification]
******** calculating SHA224 digest a 0 - byte(s) message
SET @digest_type = 'SHA224';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA224 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA224 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA224 digest of a 0 - byte(s) message must pass verification]
******** calculating SHA256 digest a 0 - byte(s) message
SET @digest_type = 'SHA256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA256 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA256 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA256 digest of a 0 - byte(s) message must pass verification]
******** calculating SHA384 digest a 0 - byte(s) message
SET @digest_type = 'SHA384';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA384 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA384 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA384 digest of a 0 - byte(s) message must pass verification]
******** calculating SHA512 digest a 0 - byte(s) message
SET @digest_type = 'SHA512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA512 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA512 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA512 digest of a 0 - byte(s) message must pass verification]
******** calculating BLAKE2B512 digest a 0 - byte(s) message
SET @digest_type = 'BLAKE2B512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2B512 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2B512 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2B512 digest of a 0 - byte(s) message must pass verification]
******** calculating BLAKE2S256 digest a 0 - byte(s) message
SET @digest_type = 'BLAKE2S256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2S256 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2S256 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2S256 digest of a 0 - byte(s) message must pass verification]
******** calculating MD4 digest a 0 - byte(s) message
SET @digest_type = 'MD4';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD4 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD4 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD4 digest of a 0 - byte(s) message must pass verification]
******** calculating RIPEMD digest a 0 - byte(s) message
SET @digest_type = 'RIPEMD';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD digest of a 0 - byte(s) message must pass verification]
******** calculating RIPEMD160 digest a 0 - byte(s) message
SET @digest_type = 'RIPEMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD160 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD160 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD160 digest of a 0 - byte(s) message must pass verification]
******** calculating RMD160 digest a 0 - byte(s) message
SET @digest_type = 'RMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RMD160 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RMD160 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RMD160 digest of a 0 - byte(s) message must pass verification]
******** calculating SHAKE128 digest a 0 - byte(s) message
SET @digest_type = 'SHAKE128';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE128 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE128 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE128 digest of a 0 - byte(s) message must pass verification]
******** calculating SHAKE256 digest a 0 - byte(s) message
SET @digest_type = 'SHAKE256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE256 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE256 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE256 digest of a 0 - byte(s) message must pass verification]
******** calculating SM3 digest a 0 - byte(s) message
SET @digest_type = 'SM3';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SM3 digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SM3 digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SM3 digest of a 0 - byte(s) message must pass verification]
******** calculating WHIRLPOOL digest a 0 - byte(s) message
SET @digest_type = 'WHIRLPOOL';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the WHIRLPOOL digest of a 0 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe WHIRLPOOL digest of a 0 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the WHIRLPOOL digest of a 0 - byte(s) message must pass verification]
SET @message = LEFT(@random_pattern, 1);
**** checking operations on 1 - byte(s) message
****** checking encryption of 1 - byte(s) message with public key
SET @message_enc_with_rsa_pub = asymmetric_encrypt(@algorithm, @message, @rsa_pub);
****** checking decryption of 1 - byte(s) message with private key
SET @message_dec_with_rsa_priv = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_pub, @rsa_priv);
include/assert.inc [message of length 1 - byte(s) decrypted with private key must match the original one]
****** checking encryption of 1 - byte(s) message with private key
SET @message_enc_with_rsa_priv = asymmetric_encrypt(@algorithm, @message, @rsa_priv);
****** checking decryption of 1 - byte(s) message with public key
SET @message_dec_with_rsa_pub = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_priv, @rsa_pub);
include/assert.inc [message of length 1 - byte(s) decrypted with public key must match the original one]
****** checking sign/verify functionality of a 1 - byte(s) message
******** calculating MD5 digest a 1 - byte(s) message
SET @digest_type = 'MD5';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD5 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD5 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD5 digest of a 1 - byte(s) message must pass verification]
******** calculating SHA1 digest a 1 - byte(s) message
SET @digest_type = 'SHA1';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA1 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA1 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA1 digest of a 1 - byte(s) message must pass verification]
******** calculating SHA224 digest a 1 - byte(s) message
SET @digest_type = 'SHA224';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA224 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA224 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA224 digest of a 1 - byte(s) message must pass verification]
******** calculating SHA256 digest a 1 - byte(s) message
SET @digest_type = 'SHA256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA256 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA256 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA256 digest of a 1 - byte(s) message must pass verification]
******** calculating SHA384 digest a 1 - byte(s) message
SET @digest_type = 'SHA384';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA384 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA384 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA384 digest of a 1 - byte(s) message must pass verification]
******** calculating SHA512 digest a 1 - byte(s) message
SET @digest_type = 'SHA512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA512 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA512 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA512 digest of a 1 - byte(s) message must pass verification]
******** calculating BLAKE2B512 digest a 1 - byte(s) message
SET @digest_type = 'BLAKE2B512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2B512 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2B512 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2B512 digest of a 1 - byte(s) message must pass verification]
******** calculating BLAKE2S256 digest a 1 - byte(s) message
SET @digest_type = 'BLAKE2S256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2S256 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2S256 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2S256 digest of a 1 - byte(s) message must pass verification]
******** calculating MD4 digest a 1 - byte(s) message
SET @digest_type = 'MD4';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD4 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD4 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD4 digest of a 1 - byte(s) message must pass verification]
******** calculating RIPEMD digest a 1 - byte(s) message
SET @digest_type = 'RIPEMD';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD digest of a 1 - byte(s) message must pass verification]
******** calculating RIPEMD160 digest a 1 - byte(s) message
SET @digest_type = 'RIPEMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD160 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD160 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD160 digest of a 1 - byte(s) message must pass verification]
******** calculating RMD160 digest a 1 - byte(s) message
SET @digest_type = 'RMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RMD160 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RMD160 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RMD160 digest of a 1 - byte(s) message must pass verification]
******** calculating SHAKE128 digest a 1 - byte(s) message
SET @digest_type = 'SHAKE128';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE128 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE128 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE128 digest of a 1 - byte(s) message must pass verification]
******** calculating SHAKE256 digest a 1 - byte(s) message
SET @digest_type = 'SHAKE256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE256 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE256 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE256 digest of a 1 - byte(s) message must pass verification]
******** calculating SM3 digest a 1 - byte(s) message
SET @digest_type = 'SM3';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SM3 digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SM3 digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SM3 digest of a 1 - byte(s) message must pass verification]
******** calculating WHIRLPOOL digest a 1 - byte(s) message
SET @digest_type = 'WHIRLPOOL';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the WHIRLPOOL digest of a 1 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe WHIRLPOOL digest of a 1 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the WHIRLPOOL digest of a 1 - byte(s) message must pass verification]
SET @message = LEFT(@random_pattern, 250);
**** checking operations on 250 - byte(s) message
****** checking encryption of 250 - byte(s) message with public key
SET @message_enc_with_rsa_pub = asymmetric_encrypt(@algorithm, @message, @rsa_pub);
****** checking decryption of 250 - byte(s) message with private key
SET @message_dec_with_rsa_priv = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_pub, @rsa_priv);
include/assert.inc [message of length 250 - byte(s) decrypted with private key must match the original one]
****** checking encryption of 250 - byte(s) message with private key
SET @message_enc_with_rsa_priv = asymmetric_encrypt(@algorithm, @message, @rsa_priv);
****** checking decryption of 250 - byte(s) message with public key
SET @message_dec_with_rsa_pub = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_priv, @rsa_pub);
include/assert.inc [message of length 250 - byte(s) decrypted with public key must match the original one]
****** checking sign/verify functionality of a 250 - byte(s) message
******** calculating MD5 digest a 250 - byte(s) message
SET @digest_type = 'MD5';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD5 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD5 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD5 digest of a 250 - byte(s) message must pass verification]
******** calculating SHA1 digest a 250 - byte(s) message
SET @digest_type = 'SHA1';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA1 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA1 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA1 digest of a 250 - byte(s) message must pass verification]
******** calculating SHA224 digest a 250 - byte(s) message
SET @digest_type = 'SHA224';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA224 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA224 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA224 digest of a 250 - byte(s) message must pass verification]
******** calculating SHA256 digest a 250 - byte(s) message
SET @digest_type = 'SHA256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA256 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA256 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA256 digest of a 250 - byte(s) message must pass verification]
******** calculating SHA384 digest a 250 - byte(s) message
SET @digest_type = 'SHA384';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA384 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA384 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA384 digest of a 250 - byte(s) message must pass verification]
******** calculating SHA512 digest a 250 - byte(s) message
SET @digest_type = 'SHA512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA512 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA512 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA512 digest of a 250 - byte(s) message must pass verification]
******** calculating BLAKE2B512 digest a 250 - byte(s) message
SET @digest_type = 'BLAKE2B512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2B512 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2B512 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2B512 digest of a 250 - byte(s) message must pass verification]
******** calculating BLAKE2S256 digest a 250 - byte(s) message
SET @digest_type = 'BLAKE2S256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2S256 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2S256 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2S256 digest of a 250 - byte(s) message must pass verification]
******** calculating MD4 digest a 250 - byte(s) message
SET @digest_type = 'MD4';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD4 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD4 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD4 digest of a 250 - byte(s) message must pass verification]
******** calculating RIPEMD digest a 250 - byte(s) message
SET @digest_type = 'RIPEMD';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD digest of a 250 - byte(s) message must pass verification]
******** calculating RIPEMD160 digest a 250 - byte(s) message
SET @digest_type = 'RIPEMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD160 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD160 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD160 digest of a 250 - byte(s) message must pass verification]
******** calculating RMD160 digest a 250 - byte(s) message
SET @digest_type = 'RMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RMD160 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RMD160 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RMD160 digest of a 250 - byte(s) message must pass verification]
******** calculating SHAKE128 digest a 250 - byte(s) message
SET @digest_type = 'SHAKE128';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE128 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE128 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE128 digest of a 250 - byte(s) message must pass verification]
******** calculating SHAKE256 digest a 250 - byte(s) message
SET @digest_type = 'SHAKE256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE256 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE256 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE256 digest of a 250 - byte(s) message must pass verification]
******** calculating SM3 digest a 250 - byte(s) message
SET @digest_type = 'SM3';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SM3 digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SM3 digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SM3 digest of a 250 - byte(s) message must pass verification]
******** calculating WHIRLPOOL digest a 250 - byte(s) message
SET @digest_type = 'WHIRLPOOL';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the WHIRLPOOL digest of a 250 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe WHIRLPOOL digest of a 250 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the WHIRLPOOL digest of a 250 - byte(s) message must pass verification]
SET @message = LEFT(@random_pattern, 501);
**** checking operations on 501 - byte(s) message
****** checking encryption of 501 - byte(s) message with public key
SET @message_enc_with_rsa_pub = asymmetric_encrypt(@algorithm, @message, @rsa_pub);
****** checking decryption of 501 - byte(s) message with private key
SET @message_dec_with_rsa_priv = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_pub, @rsa_priv);
include/assert.inc [message of length 501 - byte(s) decrypted with private key must match the original one]
****** checking encryption of 501 - byte(s) message with private key
SET @message_enc_with_rsa_priv = asymmetric_encrypt(@algorithm, @message, @rsa_priv);
****** checking decryption of 501 - byte(s) message with public key
SET @message_dec_with_rsa_pub = asymmetric_decrypt(@algorithm, @message_enc_with_rsa_priv, @rsa_pub);
include/assert.inc [message of length 501 - byte(s) decrypted with public key must match the original one]
****** checking sign/verify functionality of a 501 - byte(s) message
******** calculating MD5 digest a 501 - byte(s) message
SET @digest_type = 'MD5';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD5 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD5 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD5 digest of a 501 - byte(s) message must pass verification]
******** calculating SHA1 digest a 501 - byte(s) message
SET @digest_type = 'SHA1';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA1 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA1 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA1 digest of a 501 - byte(s) message must pass verification]
******** calculating SHA224 digest a 501 - byte(s) message
SET @digest_type = 'SHA224';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA224 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA224 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA224 digest of a 501 - byte(s) message must pass verification]
******** calculating SHA256 digest a 501 - byte(s) message
SET @digest_type = 'SHA256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA256 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA256 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA256 digest of a 501 - byte(s) message must pass verification]
******** calculating SHA384 digest a 501 - byte(s) message
SET @digest_type = 'SHA384';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA384 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA384 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA384 digest of a 501 - byte(s) message must pass verification]
******** calculating SHA512 digest a 501 - byte(s) message
SET @digest_type = 'SHA512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHA512 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHA512 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHA512 digest of a 501 - byte(s) message must pass verification]
******** calculating BLAKE2B512 digest a 501 - byte(s) message
SET @digest_type = 'BLAKE2B512';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2B512 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2B512 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2B512 digest of a 501 - byte(s) message must pass verification]
******** calculating BLAKE2S256 digest a 501 - byte(s) message
SET @digest_type = 'BLAKE2S256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the BLAKE2S256 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe BLAKE2S256 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the BLAKE2S256 digest of a 501 - byte(s) message must pass verification]
******** calculating MD4 digest a 501 - byte(s) message
SET @digest_type = 'MD4';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the MD4 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe MD4 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the MD4 digest of a 501 - byte(s) message must pass verification]
******** calculating RIPEMD digest a 501 - byte(s) message
SET @digest_type = 'RIPEMD';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD digest of a 501 - byte(s) message must pass verification]
******** calculating RIPEMD160 digest a 501 - byte(s) message
SET @digest_type = 'RIPEMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RIPEMD160 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RIPEMD160 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RIPEMD160 digest of a 501 - byte(s) message must pass verification]
******** calculating RMD160 digest a 501 - byte(s) message
SET @digest_type = 'RMD160';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the RMD160 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe RMD160 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the RMD160 digest of a 501 - byte(s) message must pass verification]
******** calculating SHAKE128 digest a 501 - byte(s) message
SET @digest_type = 'SHAKE128';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE128 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE128 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE128 digest of a 501 - byte(s) message must pass verification]
******** calculating SHAKE256 digest a 501 - byte(s) message
SET @digest_type = 'SHAKE256';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SHAKE256 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SHAKE256 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SHAKE256 digest of a 501 - byte(s) message must pass verification]
******** calculating SM3 digest a 501 - byte(s) message
SET @digest_type = 'SM3';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the SM3 digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe SM3 digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the SM3 digest of a 501 - byte(s) message must pass verification]
******** calculating WHIRLPOOL digest a 501 - byte(s) message
SET @digest_type = 'WHIRLPOOL';
SET @message_digest = create_digest(@digest_type, @message);
******** calculating signature of the WHIRLPOOL digest of a 501 - byte(s) message
SET @message_signature = asymmetric_sign(@algorithm, @message_digest, @rsa_priv, @digest_type);
******** verifying signature of thhe WHIRLPOOL digest of a 501 - byte(s) message
SET @verification_result = asymmetric_verify(@algorithm, @message_digest, @message_signature, @rsa_pub, @digest_type);
include/assert.inc [signature of the WHIRLPOOL digest of a 501 - byte(s) message must pass verification]
**** checking operations on oversize message
SET @message = LEFT(@random_pattern, 501 + 1);
****** checking encryption of oversize message with public key
SELECT asymmetric_encrypt(@algorithm, @message, @rsa_pub);
ERROR HY000: asymmetric_encrypt<string> UDF failed; encryption block size is too long for the specified padding and RSA key
****** checking encryption of oversize message with private key
SELECT asymmetric_encrypt(@algorithm, @message, @rsa_priv);
ERROR HY000: asymmetric_encrypt<string> UDF failed; encryption block size is too long for the specified padding and RSA key
SELECT create_asymmetric_priv_key('DSA', 2048);
ERROR HY000: create_asymmetric_priv_key<string> UDF failed; Invalid algorithm specified
DROP FUNCTION asymmetric_verify;
DROP FUNCTION asymmetric_sign;
DROP FUNCTION asymmetric_decrypt;
DROP FUNCTION asymmetric_encrypt;
DROP FUNCTION create_asymmetric_pub_key;
DROP FUNCTION create_asymmetric_priv_key;
DROP FUNCTION create_digest;
