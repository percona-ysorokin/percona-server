--source include/have_udf.inc

#
# Creating functions from encryption_udf
#

--replace_result $ENCRYPTION_UDF_LIB ENCRYPTION_UDF_LIB
eval CREATE FUNCTION create_asymmetric_priv_key RETURNS STRING SONAME "$ENCRYPTION_UDF_LIB";

--replace_result $ENCRYPTION_UDF_LIB ENCRYPTION_UDF_LIB
eval CREATE FUNCTION create_asymmetric_pub_key RETURNS STRING SONAME "$ENCRYPTION_UDF_LIB";

--replace_result $ENCRYPTION_UDF_LIB ENCRYPTION_UDF_LIB
eval CREATE FUNCTION create_dh_parameters RETURNS STRING SONAME "$ENCRYPTION_UDF_LIB";

--replace_result $ENCRYPTION_UDF_LIB ENCRYPTION_UDF_LIB
eval CREATE FUNCTION asymmetric_derive RETURNS STRING SONAME "$ENCRYPTION_UDF_LIB";

--echo ** [DH][$key_length] generating parameters
eval SET @dh_params = create_dh_parameters($key_length);

--echo ** [DH][$key_length] generating private/public keys from parameters
SET @dh_priv1 = create_asymmetric_priv_key('DH', @dh_params);
SET @dh_pub1 =  create_asymmetric_pub_key('DH', @dh_priv1);

SET @dh_priv2 = create_asymmetric_priv_key('DH', @dh_params);
SET @dh_pub2 =  create_asymmetric_pub_key('DH', @dh_priv2);

--echo ** [DH][$key_length] verifying shared key generation
SET @shared1 = asymmetric_derive(@dh_pub1, @dh_priv2);
SET @shared2 = asymmetric_derive(@dh_pub2, @dh_priv1);

--let $assert_text = [DH][$key_length] shared keys generated by different parties must match
--let $assert_cond = @shared1 = @shared2
--let $include_silent = 1
--source include/assert.inc
--let $include_silent =

#
# Dropping functions from encryption_udf
#
DROP FUNCTION asymmetric_derive;
DROP FUNCTION create_dh_parameters;
DROP FUNCTION create_asymmetric_pub_key;
DROP FUNCTION create_asymmetric_priv_key;
